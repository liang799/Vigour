Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    package=\"com.sp.vigour\">\r\n\r\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\r\n    <uses-permission android:name=\"android.permission.INTERNET\" />\r\n    <uses-permission android:name=\"android.permission.ACTIVITY_RECOGNITION\" />\r\n    <uses-permission android:name=\"android.permission.FOREGROUND_SERVICE\" />\r\n\r\n    <uses-feature\r\n        android:name=\"android.hardware.sensor.stepcounter\"\r\n        android:required=\"true\" />\r\n    <uses-feature\r\n        android:name=\"android.hardware.sensor.stepdetector\"\r\n        android:required=\"true\" />\r\n\r\n    <application\r\n        android:allowBackup=\"true\"\r\n        android:icon=\"@mipmap/ic_launcher\"\r\n        android:label=\"@string/app_name\"\r\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\r\n        android:supportsRtl=\"true\"\r\n        android:theme=\"@style/Theme.Vigour\">\r\n\r\n        <meta-data\r\n            android:name=\"com.google.android.geo.API_KEY\"\r\n            android:value=\"${MAPS_API_KEY}\" /> <!-- Stored in local.properties -->\r\n        <activity\r\n            android:name=\".activities.LoginActivity\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".activities.SplashScreen\"\r\n            android:exported=\"true\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n        </activity>\r\n        <activity\r\n            android:name=\".activities.MainActivity\"\r\n            android:exported=\"false\" />\r\n    </application>\r\n\r\n</manifest>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
--- a/app/src/main/AndroidManifest.xml	(revision 593a4e163d1adfaa73d184d2affc64fad979c919)
+++ b/app/src/main/AndroidManifest.xml	(date 1643790072462)
@@ -6,6 +6,8 @@
     <uses-permission android:name="android.permission.INTERNET" />
     <uses-permission android:name="android.permission.ACTIVITY_RECOGNITION" />
     <uses-permission android:name="android.permission.FOREGROUND_SERVICE" />
+    <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION"/>
+    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>
 
     <uses-feature
         android:name="android.hardware.sensor.stepcounter"
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_2_2_2022_3_34_PM_[Default_Changelist]/shelved.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2_2_2022_3_34_PM_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_2_2_2022_3_34_PM_[Default_Changelist]/shelved.patch
new file mode 100644
--- /dev/null	(date 1643787244580)
+++ b/.idea/shelf/Uncommitted_changes_before_Checkout_at_2_2_2022_3_34_PM_[Default_Changelist]/shelved.patch	(date 1643787244580)
@@ -0,0 +1,21 @@
+Index: app/src/main/java/com/sp/vigour/fragments/Home.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package com.sp.vigour.fragments;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.content.Context;\r\nimport android.graphics.Color;\r\nimport android.graphics.Typeface;\r\nimport android.hardware.Sensor;\r\nimport android.hardware.SensorManager;\r\nimport android.net.ConnectivityManager;\r\nimport android.net.NetworkInfo;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.Button;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.navigation.Navigation;\r\n\r\nimport com.sp.vigour.Addhelper;\r\nimport com.sp.vigour.R;\r\n\r\nimport org.json.JSONArray;\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.InputStreamReader;\r\nimport java.net.HttpURLConnection;\r\nimport java.net.MalformedURLException;\r\nimport java.net.URL;\r\nimport java.util.ArrayList;\r\nimport java.util.Random;\r\n\r\npublic class Home extends Fragment implements View.OnClickListener {\r\n    private Button detailsButt;\r\n    private TextView tips;\r\n    private TextView Vgr_Amount;\r\n    private TextView hide_indicator;\r\n    private TextView toggle_hide;\r\n    private boolean hidden = false;\r\n    private ArrayList<String> did_u_know;\r\n    private Handler mainHandler =  new Handler();\r\n    private SensorManager sensorManager;\r\n    private Sensor pedometer;\r\n    private TextView insight_step;\r\n    private TextView insight_coin;\r\n    private Addhelper db;\r\n    private String amount;\r\n\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        sensorManager = (SensorManager) getActivity().getSystemService(Context.SENSOR_SERVICE);\r\n        pedometer = sensorManager.getDefaultSensor(Sensor.TYPE_STEP_COUNTER);\r\n        db = new Addhelper(getContext());\r\n    }\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        // Inflate the layout for this fragment\r\n        View view = inflater.inflate(R.layout.fragment_home, container, false);\r\n        tips = view.findViewById(R.id.tips);\r\n        detailsButt = view.findViewById(R.id.details_button);\r\n        detailsButt.setOnClickListener(this);\r\n        Vgr_Amount = view.findViewById(R.id.balance_home);\r\n        hide_indicator = view.findViewById(R.id.hideEye);\r\n        toggle_hide = view.findViewById(R.id.visibilitySwitch);\r\n        toggle_hide.setOnClickListener(this);\r\n        insight_step = view.findViewById(R.id.insight_step);\r\n        insight_coin = view.findViewById(R.id.insight_coin);\r\n\r\n        if (pedometer != null){\r\n            // Success! There's a pedometer.\r\n            did_u_know = new ArrayList<>();\r\n            new fetchData().start();\r\n        } else {\r\n            // Failure! No pedometer.\r\n            tips.setText(\"Error! Your hardware does not have a Pedometer.\");\r\n            tips.setTextColor(Color.parseColor(\"#EF4B39\"));\r\n            tips.setTypeface(tips.getTypeface(), Typeface.BOLD);\r\n        }\r\n\r\n            insight_coin.setText(db.coinInsight());\r\n            insight_step.setText(db.stepsInsight());\r\n\r\n        return view;\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        amount = db.getVGR();\r\n        Vgr_Amount.setText(amount);\r\n    }\r\n\r\n    @Override\r\n    public void onClick(View v) {\r\n        switch (v.getId()) {\r\n            case R.id.visibilitySwitch:\r\n                if (hidden == false) {\r\n                    hide_indicator.setVisibility(View.VISIBLE);\r\n                    Vgr_Amount.setText(\"***\");\r\n                    hidden = true;\r\n                } else {\r\n                    hide_indicator.setVisibility(View.GONE);\r\n                    Vgr_Amount.setText(amount);\r\n                    hidden = false;\r\n                }\r\n                break;\r\n            case R.id.details_button:\r\n                Navigation.findNavController(v).navigate(R.id.action_home2_to_transactions);\r\n                break;\r\n            default:\r\n                throw new IllegalStateException(\"Unexpected value: \" + v.getId());\r\n        }\r\n    }\r\n\r\n    class fetchData extends Thread {    // to allow stuff to be run simultaneously\r\n        String data = \"\";\r\n\r\n        @Override\r\n        public void run(){\r\n            try {\r\n                URL url = new URL(\"https://api.npoint.io/cbb709d068583b916068\");\r\n//                URL url = new URL(\"https://opensheet.elk.sh/1y9yJlj3czkw9BDVR3d6BZXW_cOzpMNSxHkHlESlK4D4/1\");\r\n                HttpURLConnection httpURLConnection = (HttpURLConnection) url.openConnection();\r\n                InputStream is = httpURLConnection.getInputStream();\r\n                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(is));\r\n                String line;\r\n\r\n                while ((line = bufferedReader.readLine()) != null) {\r\n                    data += line;\r\n                }\r\n\r\n                if (!data.isEmpty()) {\r\n                    JSONObject jsonObject = new JSONObject(data);\r\n                    JSONArray facts_array = jsonObject.getJSONArray(\"Did you know?\");\r\n                    for (int i = 0; i < facts_array.length(); i++) {\r\n                        JSONObject facts = facts_array.getJSONObject(i);\r\n                        String fact = facts.getString(\"Did you know?\");\r\n                        did_u_know.add(fact);\r\n                    }\r\n                }\r\n            } catch (MalformedURLException e) {\r\n                e.printStackTrace();\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            } catch (JSONException e) {\r\n                e.printStackTrace();\r\n            }\r\n\r\n            mainHandler.post( new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    if (isNetworkAvailable()) {\r\n                        int random = new Random().nextInt(did_u_know.size());\r\n                        tips.setText(did_u_know.get(random));\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private boolean isNetworkAvailable() {\r\n        ConnectivityManager connectivityManager\r\n                = (ConnectivityManager) getActivity().getSystemService(Context.CONNECTIVITY_SERVICE);\r\n        @SuppressLint(\"MissingPermission\") NetworkInfo activeNetworkInfo = connectivityManager.getActiveNetworkInfo();\r\n        return activeNetworkInfo != null && activeNetworkInfo.isConnected();\r\n    }\r\n}
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/app/src/main/java/com/sp/vigour/fragments/Home.java b/app/src/main/java/com/sp/vigour/fragments/Home.java
+--- a/app/src/main/java/com/sp/vigour/fragments/Home.java	(revision c03d9b5bd81a1e0e973d7a31062243844d9fdb21)
++++ b/app/src/main/java/com/sp/vigour/fragments/Home.java	(date 1643787139654)
+@@ -85,8 +85,8 @@
+             tips.setTypeface(tips.getTypeface(), Typeface.BOLD);
+         }
+ 
+-            insight_coin.setText(db.coinInsight());
+-            insight_step.setText(db.stepsInsight());
++            //insight_coin.setText(db.coinInsight());
++            //insight_step.setText(db.stepsInsight());
+ 
+         return view;
+     }
Index: app/src/main/java/com/sp/vigour/GPSTracker.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/sp/vigour/GPSTracker.java b/app/src/main/java/com/sp/vigour/GPSTracker.java
new file mode 100644
--- /dev/null	(date 1643790266919)
+++ b/app/src/main/java/com/sp/vigour/GPSTracker.java	(date 1643790266919)
@@ -0,0 +1,225 @@
+package com.sp.vigour;
+
+import android.Manifest;
+import android.annotation.SuppressLint;
+import android.app.Service;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.content.pm.PackageManager;
+import android.location.Location;
+import android.location.LocationListener;
+import android.location.LocationManager;
+import android.net.Uri;
+import android.os.Bundle;
+import android.os.IBinder;
+import android.provider.Settings;
+
+import androidx.appcompat.app.AlertDialog;
+import androidx.core.app.ActivityCompat;
+
+public class GPSTracker extends Service implements LocationListener {
+
+    private Context mContext = null;
+    boolean isGPSEnabled = false;
+    boolean isNetworkEnabled = false;
+    boolean canGetLocation = false;
+
+    Location location;
+    double latitude;
+    double longitude;
+
+    //The min distance to change Updates in meters
+    private static final long MIN_DISTANCE_CHANGE_FOR_UPDATES = 10; //10meters
+    //The minimum time between updates in milliseconds
+    private static final long MIN_TIME_BW_UPDATES = 1000 * 60 * 1; // 1minute
+    //Declaring a location manager
+    protected LocationManager locationManager;
+
+    public GPSTracker() { checkGPSPermissions(); }
+
+    public GPSTracker(Context context) {
+        this.mContext = context;
+        checkGPSPermissions();
+    }
+
+    @SuppressLint("MissingPermission")
+    public Location getLocation() {
+        this.canGetLocation = false;
+        try {
+            locationManager = (LocationManager) mContext.getSystemService(LOCATION_SERVICE);
+            //getting GPS status
+            isGPSEnabled = locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER);
+            //getting network status
+            isNetworkEnabled = locationManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER);
+            if (!isGPSEnabled && !isNetworkEnabled) {
+                //no network provider is enabled
+                //prompt user to enable location services
+                showEnableLocationAlert();
+            } else {
+                this.canGetLocation = true;
+                if (isNetworkEnabled) {
+                    //Permission granted
+                    locationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, MIN_TIME_BW_UPDATES, MIN_DISTANCE_CHANGE_FOR_UPDATES, this);
+                    if (locationManager != null) {
+                        location = locationManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);
+                        if (location != null) {
+                            latitude = location.getLatitude();
+                            longitude = location.getLongitude();
+                        }
+                    }
+                }
+                //if GPS Enabled get lat/long using GPS Services
+                if (isGPSEnabled) {
+                    if (location == null) {
+                        locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, MIN_TIME_BW_UPDATES, MIN_DISTANCE_CHANGE_FOR_UPDATES, this);
+                        if (locationManager != null) {
+                            location = locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);
+                            if (location != null) {
+                                latitude = location.getLatitude();
+                                longitude = location.getLongitude();
+                            }
+                        }
+                    }
+                }
+            }
+        } catch (SecurityException e) {
+            e.printStackTrace();
+        }
+        return location;
+    }
+
+    //Funtion to get latitude
+
+
+    public double getLatitude() {
+        if (location != null) {
+            latitude = location.getLatitude();
+        }
+        return latitude;
+    }
+
+    //Funtion to get longitude
+
+
+    public double getLongitude() {
+        if (location != null) {
+            longitude = location.getLongitude();
+        }
+        return longitude;
+    }
+
+    /**
+     * Stop using GPS listener
+     * Calling this function will stop using GPS in your app
+     */
+
+    @SuppressLint("MissingPermission")
+    public void stopUsingGPS() {
+        if (locationManager != null) {
+            locationManager.removeUpdates(GPSTracker.this);
+        }
+    }
+
+    /**
+     * Functions to check GPS/Wifi enabled
+     *
+     * @return Boolean
+     */
+
+    public boolean canGetLocation() {
+        checkGPSPermissions();
+        return canGetLocation;
+    }
+
+    //check for location permission
+    public void checkGPSPermissions() {
+        int permissionState1 = ActivityCompat.checkSelfPermission(mContext, Manifest.permission.ACCESS_FINE_LOCATION);
+        int permissionState2 = ActivityCompat.checkSelfPermission(mContext, Manifest.permission.ACCESS_COARSE_LOCATION);
+
+        if (permissionState1 == PackageManager.PERMISSION_GRANTED && permissionState2 == PackageManager.PERMISSION_GRANTED) {
+            //Permissions granted, get GPS location
+            getLocation();
+        } else {
+            //Prompt user to enable location permission
+            showEnablePermissionAlert();
+        }
+    }
+
+    /**
+     * Functions to show settings dialog On pressing Settings button will launch Settings Options
+     */
+    public void showEnablePermissionAlert() {
+        AlertDialog.Builder alertDialog = new AlertDialog.Builder(mContext);
+        //Setting Dialog Title
+        alertDialog.setTitle("Location Permission Settings");
+        //Setting Dialog message
+        alertDialog.setMessage("Attraction List Location Permission is not enabled. " + "Do you want to go to setting menu?");
+        //on Pressing Settings button
+        alertDialog.setPositiveButton("Settings", new DialogInterface.OnClickListener() {
+            public void onClick(DialogInterface dialog, int which) {
+                Intent intent = new Intent();
+                // Goto Application Setting
+                intent.setAction(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);
+                Uri uri = Uri.fromParts("package",
+                        BuildConfig.APPLICATION_ID, null);
+                intent.setData(uri);
+                intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+                mContext.startActivity(intent);
+            }
+        });
+
+        // on Pressing cancel button
+        alertDialog.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
+            @Override
+            public void onClick(DialogInterface dialog, int which) {
+                dialog.cancel();
+            }
+        });
+        //Showing alert message
+        alertDialog.show();
+    }
+
+    public void showEnableLocationAlert() {
+        AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(mContext);
+        //Setting Dialog Title
+        alertDialogBuilder.setTitle("Location Service Settings");
+        alertDialogBuilder.setMessage("Location service is disabled in your device. " + "Would you like to enable it?").setCancelable(false).setPositiveButton("Goto Settings Page To Enable Location Service", new DialogInterface.OnClickListener() {
+            @Override
+            public void onClick(DialogInterface dialog, int which) {
+                //Goto location services
+                Intent callGPSSettingIntent = new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);
+                mContext.startActivity(callGPSSettingIntent);
+            }
+        });
+        alertDialogBuilder.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
+            @Override
+            public void onClick(DialogInterface dialog, int which) {
+                dialog.cancel();
+            }
+        });
+        AlertDialog alert = alertDialogBuilder.create();
+        alert.show();
+    }
+
+    @Override
+    public void onLocationChanged(Location location) { getLocation(); }
+
+    @Override
+    public void onProviderDisabled(String provider) {
+    }
+
+    @Override
+    public void onProviderEnabled(String provider) {
+    }
+
+    @Override
+    public void onStatusChanged(String provider, int status, Bundle extras) {
+    }
+
+    @Override
+    public IBinder onBind(Intent intent) {
+        // TODO: Return the communication channel to the service.
+        throw new UnsupportedOperationException("Not yet implemented");
+    }
+}
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_2_2_2022_3_34_PM__Default_Changelist_.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_2_2_2022_3_34_PM__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Checkout_at_2_2_2022_3_34_PM__Default_Changelist_.xml
new file mode 100644
--- /dev/null	(date 1643790154222)
+++ b/.idea/shelf/Uncommitted_changes_before_Checkout_at_2_2_2022_3_34_PM__Default_Changelist_.xml	(date 1643790154222)
@@ -0,0 +1,4 @@
+<changelist name="Uncommitted_changes_before_Checkout_at_2_2_2022_3_34_PM_[Default_Changelist]" date="1643787244997" recycled="true" deleted="true">
+  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_2_2_2022_3_34_PM_[Default_Changelist]/shelved.patch" />
+  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 2/2/2022 3:34 PM [Default Changelist]" />
+</changelist>
\ No newline at end of file
